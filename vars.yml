---
## a unix path-friendly name (IE, no spaces or special characters)
#project_name: django_hello
#
## the base path to install to. You should not need to change this.
#install_root: /srv
#
## the python module path to your project's wsgi file. E.g. for a directory
## layout like this (assuming `django_hello` is the project_name and top level
## directory name):
## django_hello
## ├── hello
## │   ├── apps
## │   ├── __init__.py
## │   ├── settings.py
## │   ├── urls.py
## │   └── wsgi.py
## ├── manage.py
## └── requirements.txt
## the correct wsgi_module value would be `hello.wsgi`
#wsgi_module: hello.wsgi
#
## any directories that need to be added to the PYTHONPATH.
#pythonpath: "{{ install_root }}/{{ project_name }}/{{ project_name }}"
#
## the git repository URL for the project
#project_repo: git@github.com:technivore/django-hello-world.git
#    
## a private key that has access to the repository URL
#ssh_private_key: ~/.ssh/id_rsa
#
## The value of your django project's STATIC_ROOT settings.
## This will be the directory that django's `collectstatic` management command
## copies static files to, and it must be an absolute path. The default value 
## here assumes that STATIC_ROOT is set in your settings.py like so:
## STATIC_ROOT = os.path.abspath(os.path.join(BASE_DIR, 'static'))
#static_root: "{{ install_root }}/{{ project_name }}/static"
#
## the dns name or names (space separated) for your server
## server_name: django-hello.com www.django-hello.com
#server_name: pbranigade.mooo.com
#
## database setup. Note that because this playbook doesn't touch the default 
## postgres pg_hba.conf file, we use local password-based authentication for
## postgres and thus you need to provide a username and password, and your
## settings.py MUST set "localhost" or "127.0.0.1" as the HOST value. For
## example, the default settings here assume the following values in
## settings.py:
## DATABASES = {
##     'default': {
##         'ENGINE': 'django.db.backends.postgresql_psycopg2',
##         'HOST': 'localhost',
##         'NAME': 'hello',
##         'USER': 'hello',
##         'PASSWORD': 'changeme',
##     }
## }
#db_name: myproject
#db_user: myprojectuser
#db_password: password

project_name: myproject  # NO SPACES
user_name: user
host_ip: "{{ ansible_default_ipv4.address }}"


remote_file_path: /home/{{ user_name }}/{{ project_name }}/{{ project_name }}.py
remote_wsgi_file_path: /home/{{ user_name }}/{{ project_name }}/wsgi.py
systemd_file_path: /etc/systemd/system/{{ project_name }}.service

file_content: |
  from flask import Flask
  application = Flask(__name__)

  @application.route("/")
  def hello():
      return "<h1 style='color:blue'>Hello There!</h1>"

  if __name__ == "__main__":
      application.run(host='0.0.0.0')
      
wsgi_file_content: |
  from myproject import application

  if __name__ == "__main__":
      application.run()
      
systemd_file_content: |
    [Unit]
    Description=Gunicorn instance to serve project {{ project_name }}
    After=network.target

    [Service]
    User={{ user_name }}
    Group=nginx
    WorkingDirectory=/home/{{ user_name }}/{{ project_name }}
    Environment="PATH=/home/{{ user_name }}/{{ project_name }}/{{ project_name }}env/bin"
    ExecStart=/home/{{ user_name }}/{{ project_name }}/{{ project_name }}env/bin/gunicorn --workers 3 --bind unix:{{ project_name }}.sock -m 007 wsgi

    [Install]
    WantedBy=multi-user.target

nginx_file_block: |2
      server {
          listen 80;
          server_name {{ host_ip }};

          location / {
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_pass http://unix:/home/user/{{ project_name }}/{{ project_name }}.sock;
          }
      }

#
## apt packages, you should not need to change this unless you have packages
## listed in your requirements.txt that depend on system packages.
# python3-pip python3-dev libpq-dev postgresql postgresql-contrib nginx
system_packages:
#  - epel-release
  - python-pip
  - python-devel
  - gcc
  - nginx
#  - git
#  - nginx
#  - gunicorn
#  - postgresql
#  - postgresql-server-dev-all
#  - python-pip
#  - python-dev
#  - python-psycopg2

# vim:ft=ansible:
